var documenterSearchIndex = {"docs":
[{"location":"macros/#Macros","page":"Macros","title":"Macros","text":"","category":"section"},{"location":"macros/","page":"Macros","title":"Macros","text":"The two main general utilities for working with quantities are ustrip and dimension:","category":"page"},{"location":"macros/","page":"Macros","title":"Macros","text":"@stable\n@unstable","category":"page"},{"location":"macros/#DispatchDoctor.@stable","page":"Macros","title":"DispatchDoctor.@stable","text":"@stable [warnonly=false] [func_definition]\n\nA macro to enforce type stability in functions. When applied, it ensures that the return type of the function is concrete. If type instability is detected, a TypeInstabilityError is thrown. You may also pass warnonly=true to only emit a warning.\n\nUsage\n\nusing DispatchDoctor: @stable\n\n@stable function relu(x)\n    if x > 0\n        return x\n    else\n        return 0.0\n    end\nend\n\nExample\n\njulia> relu(1.0)\n1.0\n\njulia> relu(0)\nERROR: TypeInstabilityError: Instability detected in function `relu`\nwith arguments `(Int64,)`. Inferred to be `Union{Float64, Int64}`,\nwhich is not a concrete type.\n\n\n\n\n\n","category":"macro"},{"location":"macros/#DispatchDoctor.@unstable","page":"Macros","title":"DispatchDoctor.@unstable","text":"@unstable [func_definition]\n\nA no-op macro to mark functions as unstable when @stable is used on a module.\n\n\n\n\n\n","category":"macro"},{"location":"macros/#Utilities","page":"Macros","title":"Utilities","text":"","category":"section"},{"location":"macros/","page":"Macros","title":"Macros","text":"DispatchDoctor.type_instability","category":"page"},{"location":"macros/#DispatchDoctor.type_instability","page":"Macros","title":"DispatchDoctor.type_instability","text":"type_instability(T::Type)\n\nReturns true if this type is not concrete. Will also return false for Union{}, so that errors can propagate.\n\n\n\n\n\n","category":"function"},{"location":"#DispatchDoctor","page":"Home","title":"DispatchDoctor ðŸ©º","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The doctor's orders: no type instability allowed!","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage) (Image: Aqua QA) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides the @stable macro to enforce that a function has a type stable return value.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DispatchDoctor: @stable\n\n@stable function relu(x)\n    if x > 0\n        return x\n    else\n        return 0.0\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"which will then throw an error for any type instability:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> relu(1.0)\n1.0\n\njulia> relu(0)\nERROR: TypeInstabilityError: Instability detected in function `relu`\nwith arguments `(Int64,)`. Inferred to be `Union{Float64, Int64}`,\nwhich is not a concrete type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Code which is type stable should safely compile away the check:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @stable f(x) = x;","category":"page"},{"location":"","page":"Home","title":"Home","text":"leaving @code_llvm f(1):","category":"page"},{"location":"","page":"Home","title":"Home","text":"define i64 @julia_f_12055(i64 signext %\"x::Int64\") #0 {\ntop:\n  ret i64 %\"x::Int64\"\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"and thus meaning there is zero overhead on the type stability check.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also use @stable on entire modules:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@stable module A\n    using DispatchDoctor: @unstable\n\n    @unstable f1() = rand(Bool) ? 0 : 1.0\n    f2(x) = x\n    f3(; a=1) = a > 0 ? a : 0.0\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"where we use @unstable to mark functions that should not be wrapped.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Tip: in the REPL, wrap this with @eval, because the REPL has special handling of the module keyword.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This gives us:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> A.f1()\n0\n\njulia> A.f2(1.0)\n1.0\n\njulia> A.f3(a=2)\nERROR: TypeInstabilityError: Instability detected in function `f3`\nwith keyword arguments `@NamedTuple{a::Int64}`. Inferred to be\n`Union{Float64, Int64}`, which is not a concrete type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"where we can see that the @stable was automatically applied to all the functions, except for f1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[!NOTE] This will automatically propagate apply through any include within the module, by overwriting the default method.","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Many thanks to @chriselrod and @thofma for tips on this discord thread.","category":"page"}]
}
